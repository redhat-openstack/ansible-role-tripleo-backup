---
- name: check or install required packages
  yum: name={{ item }} state=latest
  with_items:
    - libvirt
    - qemu-kvm
    - net-tools

- name: make sure libvirtd is started
  service: name=libvirtd state=started

# @TODO matbu: make a teardown set of tasks and tags
- name: destroy vms
  ignore_errors: true
  with_items: "{{ vms }}"
  shell: >
    virsh destroy {{ item }};
    virsh undefine {{ item }};

- name: destroy network if exist
  ignore_errors: true
  with_items: "{{ networks_name }}"
  shell: >
    if virsh net-list | grep {{ item }}; then
        virsh net-destroy {{ item }};
        virsh net-undefine {{ item }}
    fi

- name: destroy pool
  ignore_errors: true
  shell: >
    virsh pool-destroy {{ pool_name }}

- name: remove tripleo vms working dir
  file:
    path: "{{ oooq_vms_path }}"
    state: absent
  become: true

- name: create tripleo vms working dir
  file:
    path: "{{ oooq_tar_path }}"
    state: directory
  become: true

- name: get expected checksum
  command: >
    curl -sf {{ proto }}://{{ http_server }}/{{ http_path }}/{{ oooq_tar_name }}.md5
  register: md5_expected

- name: set path to cached image
  set_fact:
    image_cache_path: "{{ oooq_tar_path }}/{{ md5_expected.stdout.split()[0] }}.tar.gz"

- name: check for image in cache
  command: >
    test -f {{ image_cache_path }}
  args:
    chdir: "{{ image_cache_dir }}"
  ignore_errors: true
  register: image_exists

- name: download tar file
  when: not image_exists|bool
  get_url:
    url: "{{ proto }}://{{ http_server }}/{{ http_path }}/{{ oooq_tar_name }}"
    dest: "{{ image_cache_dir }}"

- name: untar tripleo vms
  unarchive:
    src: "{{ image_cache_dir }}/{{ oooq_tar_name }}"
    dest: "/"
    copy: no
# @TODO: matbu test out this rather than fetch and untar
#    src: "{{ proto }}://{{ http_server }}/{{ http_path }}/{{ oooq_tar_name }}"

- name: create oooq_pool
  shell: >
    virsh pool-create {{ oooq_vms_path }}/{{ pool_name }}.xml

- name: create networks
  shell: >
    virsh net-create {{ oooq_vms_path }}/{{ item }}.xml
  with_items: "{{ networks_name }}"

- name: start vms
  shell: >
    virsh create {{ oooq_vms_path }}/{{ item }}.xml
  with_items: "{{ vms }}"
